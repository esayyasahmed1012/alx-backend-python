pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS = credentials('github-creds')
        DOCKER_CREDENTIALS = credentials('dockerhub-creds')  // <-- Add this in Jenkins
        VENV_DIR = '.venv'
        IMAGE_NAME = "your-dockerhub-username/messaging_app"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/<your-username>/alx-backend-python.git',
                    credentialsId: 'github-creds'
            }
        }

        stage('Set up Python Env') {
            steps {
                sh """
                python3 -m venv $VENV_DIR
                source $VENV_DIR/bin/activate
                pip3 install --upgrade pip
                pip3 install -r messaging_app/requirements.txt
                """
            }
        }

        stage('Run Tests') {
            steps {
                sh """
                source $VENV_DIR/bin/activate
                pytest messaging_app/tests --junitxml=pytest-report.xml
                """
            }
            post {
                always {
                    junit 'pytest-report.xml'
                }
            }
        }

        stage('Generate Coverage Report') {
            steps {
                sh """
                source $VENV_DIR/bin/activate
                pytest --cov=messaging_app --cov-report=xml
                """
            }
            post {
                always {
                    publishCoverage adapters: [coberturaAdapter('coverage.xml')]
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    docker build -t $IMAGE_NAME:latest messaging_app
                    """
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                      usernameVariable: 'DOCKER_USER',
                                                      passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push $IMAGE_NAME:latest
                        docker logout
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished. Reports generated. Docker image built and pushed.'
        }
    }
}
